{"version":3,"file":"index.js","sources":["../../src/ts/DragPaneController.ts","../../src/ts/Interfaces/CustomElements.ts","../../src/ts/AppIconController.ts","../../src/ts/ApplicationInstance.ts","../../src/ts/HeaderClockController.ts","../../src/ts/index.ts"],"sourcesContent":["export default class DragPaneController {\n\n    public parentEl: HTMLDivElement;\n\n    public dockedQty: number = 0;\n\n    public dockedEl: Set<HTMLElement> = new Set();\n\n    public readonly dragBarHeight = 40;\n\n    constructor(){\n        this.parentEl = document.querySelector<HTMLDivElement>(\"#main\")!;\n\n        this.parentEl.addEventListener('toggleminimize', (event: Event) => {\n            if ((event.target! as any).minimized) {\n                this.handleMinimize(event);\n            } else {\n                this.handleMaximize(event);\n            }\n        });\n\n        window.addEventListener(\"resize\", this.handleWindowResize)\n\n    }\n\n    private handleMinimize = (event: Event) => {\n        const el = (event.target! as HTMLElement);\n        const initialPos = {top: el.style.top, left: el.style.left};\n        el.dataset.initialPos = JSON.stringify(initialPos);\n        el.style.top = `${window.innerHeight - this.dragBarHeight - 20}px`;\n        el.style.left = `${this.dockedQty * 20}px`;\n        this.dockedQty ++;\n        this.dockedEl.add(el);\n    };\n\n    private handleMaximize = (event: Event) => {\n        const el = (event.target! as HTMLElement);\n        this.dockedQty --;\n        this.dockedEl.delete(el);\n        const initialPos = el.dataset.initialPos;\n        if (initialPos) {\n            const initialPosObj = JSON.parse(initialPos);\n            el.style.top = initialPosObj.top;\n            el.style.left = initialPosObj.left;\n        };\n    };\n\n    private handleWindowResize = () => {\n        this.dockedEl.forEach( (el) => {\n            el.style.top = `${window.innerHeight - this.dragBarHeight - 20}px`;\n        });\n    };\n}","export namespace DragPane {\n    export interface Element extends HTMLElement {\n        heading: string;\n        toggleMinimized: () => void;\n    }\n}\n\nexport namespace MinesweeperGame {\n    export interface Element extends HTMLElement {\n        width: number;\n        height: number;\n        scale: number;\n    }\n}\n\nexport namespace CodeEdit {\n    export enum Mode {\n        htmlmixed = \"htmlmixed\",\n        javascript = \"javascript\",\n        typescript = \"typescript\",\n        markdown = \"markdown\"\n    }\n    export interface Element extends HTMLElement {\n        mode: Mode;\n        storageKey: string | undefined;\n    }\n}\n","import {DragPane, CodeEdit, MinesweeperGame} from \"./Interfaces/CustomElements\";\nimport ApplicationInstance from \"./ApplicationInstance\";\n\nexport enum App {\n    MINESWEEPER = \"ms-app\",\n    CLOCK = \"clock-app\",\n    CONSOLE = \"console-app\",\n};\n\nexport default class AppIconController {\n\n    public iconRef: NodeListOf<HTMLDivElement>;\n    public parentEl: HTMLDivElement;\n\n    public msApp: ApplicationInstance<MinesweeperGame.Element>;\n    public clockApp: ApplicationInstance;\n    public consoleApp: ApplicationInstance<CodeEdit.Element>;\n\n    public static openApps: Map<App, HTMLElement> = new Map();\n    public static activeApp: App|undefined = undefined;\n\n\n    constructor(){\n        this.iconRef = document.querySelectorAll<HTMLDivElement>(\".click-icon\");\n        this.parentEl = document.querySelector<HTMLDivElement>(\"#main\")!;\n\n        this.iconRef.forEach( (el) => {\n            el.addEventListener(\"dblclick\", this.handleIconDblClick);\n        });\n\n\n        this.msApp = new ApplicationInstance<MinesweeperGame.Element>(App.MINESWEEPER, \"minesweeper-game\", \"Minesweeper\", this.parentEl);\n        this.msApp.applicationEl.width = 10;\n        this.msApp.applicationEl.height = 10;\n        this.msApp.applicationEl.scale = 0.6;\n\n        this.clockApp = new ApplicationInstance(App.CLOCK, \"date-clock\", \"Clock\", this.parentEl);\n\n        this.consoleApp = new ApplicationInstance(App.CONSOLE, \"code-edit\", \"Console\", this.parentEl);\n        this.consoleApp.applicationEl.mode = CodeEdit.Mode.javascript;\n    }\n\n    private handleIconDblClick = (event: MouseEvent) => {\n        const appID = (event.currentTarget as HTMLDivElement).dataset.appName;\n        switch (appID) {\n            case \"ms-app\":\n                this.msApp.openApp();\n                break;\n            case \"clock-app\":\n                this.clockApp.openApp();\n                break;\n            case \"console-app\":\n                this.consoleApp.openApp();\n                break;\n            default:\n                console.log(appID);\n                break;\n        }\n    };\n\n}","import {DragPane} from \"./Interfaces/CustomElements\";\nimport AppIconController, {App} from \"./AppIconController\";\n\nexport default class ApplicationInstance<AppType extends HTMLElement = HTMLElement> {\n\n    public appID: App;\n    public applicationEl: AppType;\n    public paneWrapperEl: DragPane.Element;\n    public parentEl: HTMLDivElement;\n\n    constructor(app: App, tagName: string, paneHeading: string, parentEl: HTMLDivElement){\n        this.appID = app;\n        this.parentEl = parentEl;\n\n        this.applicationEl = document.createElement(tagName) as AppType;\n        this.paneWrapperEl = document.createElement(\"drag-pane\") as DragPane.Element;\n        this.paneWrapperEl.heading = paneHeading;\n        this.paneWrapperEl.id = app;\n        this.paneWrapperEl.className = \"app-pane\";\n    }\n\n    public openApp(){\n        if (!AppIconController.openApps.has(this.appID)) {\n\n            this.paneWrapperEl.appendChild(this.applicationEl);\n            this.parentEl.appendChild(this.paneWrapperEl);\n\n            AppIconController.openApps.set(this.appID, this.paneWrapperEl);\n            AppIconController.activeApp = this.appID;\n\n            this.paneWrapperEl.addEventListener(\"remove\", () => {\n                AppIconController.openApps.delete(this.appID);\n            }, {once: true});\n\n            this.paneWrapperEl.addEventListener(\"click\", () => {\n                if (AppIconController.activeApp !== this.appID && AppIconController.openApps.size > 1)\n                this.moveToTop(this.appID);\n            });\n        }else {\n            (AppIconController.openApps.get(this.appID) as DragPane.Element)?.toggleMinimized();\n        }\n    }\n\n    private moveToTop = (app: App) => {\n        AppIconController.openApps.forEach( (value, key) => {\n            value.style.zIndex = \"1\";\n        });\n        AppIconController.openApps.get(app)!.style.zIndex = \"2\";\n        AppIconController.activeApp = app;\n    };\n}","export default class HeaderClockController {\n\n    el: HTMLDivElement;\n\n    is24Hr: boolean = true;\n    monthFormat: \"short\"|\"long\" = \"short\";\n\n    dayNames: Map<number, string> = new Map([\n        [0, \"Sunday\"],\n        [1, \"Monday\"],\n        [2, \"Tuesday\"],\n        [3, \"Wednesday\"],\n        [4, \"Thursday\"],\n        [5, \"Friday\"],\n        [6, \"Saturday\"],\n    ]);\n\n    monthNames: Map<number, {long:string, short:string}> = new Map([\n        [0, {long:\"January\", short:\"Jan\"}],\n        [1, {long:\"February\", short:\"Feb\"}],\n        [2, {long:\"March\", short:\"Mar\"}],\n        [3, {long:\"April\", short:\"Apr\"}],\n        [4, {long:\"May\", short:\"May\"}],\n        [5, {long:\"June\", short:\"Jun\"}],\n        [6, {long:\"July\", short:\"Jul\"}],\n        [7, {long:\"August\", short:\"Aug\"}],\n        [8, {long:\"September\", short:\"Sep\"}],\n        [9, {long:\"October\", short:\"Oct\"}],\n        [10, {long:\"November\", short:\"Nov\"}],\n        [10, {long:\"December\", short:\"Dec\"}],\n    ]);\n\n    constructor(){\n        this.el = document.querySelector<HTMLDivElement>(\"#header-clock\")!;\n        this.setDateTime();\n        window.setInterval(() => this.setDateTime(), 1000);\n    }\n\n    public buildDateTime(){\n        const date = new Date();\n        const dayName = this.dayNames.get(date.getDay());\n        const dateNumber = date.getDate();\n        const monthName = this.monthNames.get(date.getMonth())![this.monthFormat];\n        const hours = (this.is24Hr ? date.getHours() : date.getHours()%12).toString();\n        const minutes = date.getMinutes().toString().padStart(2, '0');\n        const seconds = date.getSeconds().toString().padStart(2, '0');\n        return `${dayName} ${monthName} ${dateNumber} ${hours}:${minutes}:${seconds}`\n    }\n\n    public setDateTime(){\n        this.el.innerText = this.buildDateTime();\n    }\n}","import DragPaneController from \"./DragPaneController\";\nimport AppIconController from \"./AppIconController\";\nimport HeaderClockController from \"./HeaderClockController\";\n\nexport const initializeViewControllers = () => {\n    new DragPaneController();\n    new AppIconController();\n    new HeaderClockController();\n}"],"names":["DragPaneController","[object Object]","this","Set","event","el","target","initialPos","top","style","left","dataset","JSON","stringify","window","innerHeight","dragBarHeight","dockedQty","dockedEl","add","delete","initialPosObj","parse","forEach","parentEl","document","querySelector","addEventListener","minimized","handleMinimize","handleMaximize","handleWindowResize","CodeEdit","App","Mode","ApplicationInstance","app","tagName","paneHeading","AppIconController","openApps","value","key","zIndex","get","activeApp","appID","applicationEl","createElement","paneWrapperEl","heading","id","className","has","toggleMinimized","appendChild","set","once","size","moveToTop","currentTarget","appName","msApp","openApp","clockApp","consoleApp","console","log","iconRef","querySelectorAll","handleIconDblClick","MINESWEEPER","width","height","scale","CLOCK","CONSOLE","mode","javascript","Map","undefined","HeaderClockController","long","short","setDateTime","setInterval","date","Date","dayName","dayNames","getDay","dateNumber","getDate","monthNames","getMonth","monthFormat","is24Hr","getHours","toString","getMinutes","padStart","getSeconds","innerText","buildDateTime","initializeViewControllers"],"mappings":"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"}